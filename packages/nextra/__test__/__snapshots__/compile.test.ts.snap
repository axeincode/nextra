// Vitest Snapshot v1

exports[`process heading > code-h1 1`] = `
{
  "headings": [
    {
      "depth": 1,
      "value": "codegen.yml",
    },
  ],
  "result": "/*@jsxRuntime automatic @jsxImportSource react*/
import {useMDXComponents as _provideComponents} from \\"@mdx-js/react\\";
const __nextra_title__ = \\"codegen.yml\\";
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: \\"h1\\",
    code: \\"code\\"
  }, _provideComponents(), props.components);
  return <_components.h1><_components.code>{\\"codegen.yml\\"}</_components.code></_components.h1>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

",
  "structurizedData": {},
}
`;

exports[`process heading > code-with-text-h1 1`] = `
{
  "headings": [
    {
      "depth": 1,
      "value": "codegen.yml file",
    },
  ],
  "result": "/*@jsxRuntime automatic @jsxImportSource react*/
import {useMDXComponents as _provideComponents} from \\"@mdx-js/react\\";
const __nextra_title__ = \\"codegen.yml file\\";
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: \\"h1\\",
    code: \\"code\\"
  }, _provideComponents(), props.components);
  return <_components.h1><_components.code>{\\"codegen.yml\\"}</_components.code>{\\" file\\"}</_components.h1>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

",
  "structurizedData": {},
}
`;

exports[`process heading > dynamic-h1 1`] = `
{
  "hasJsxInH1": true,
  "headings": [
    {
      "depth": 1,
      "value": "Posts Tagged with “”",
    },
  ],
  "result": "/*@jsxRuntime automatic @jsxImportSource react*/
import {useMDXComponents as _provideComponents} from \\"@mdx-js/react\\";
const __nextra_title__ = \\"Posts Tagged with “”\\";
import {useRouter} from 'next/router';
export const TagName = () => {
  const {tag} = useRouter().query;
  return tag || null;
};
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: \\"h1\\"
  }, _provideComponents(), props.components);
  return <_components.h1>{\\"Posts Tagged with “\\"}<TagName />{\\"”\\"}</_components.h1>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

",
  "structurizedData": {},
}
`;

exports[`process heading > no-h1 1`] = `
{
  "headings": [
    {
      "depth": 2,
      "value": "H2",
    },
  ],
  "result": "/*@jsxRuntime automatic @jsxImportSource react*/
import {useMDXComponents as _provideComponents} from \\"@mdx-js/react\\";
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: \\"h2\\"
  }, _provideComponents(), props.components);
  return <_components.h2 id=\\"h2\\">{\\"H2\\"}</_components.h2>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

",
  "structurizedData": {},
}
`;

exports[`process heading > static-h1 1`] = `
{
  "headings": [
    {
      "depth": 1,
      "value": "Hello World",
    },
  ],
  "result": "/*@jsxRuntime automatic @jsxImportSource react*/
import {useMDXComponents as _provideComponents} from \\"@mdx-js/react\\";
const __nextra_title__ = \\"Hello World\\";
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: \\"h1\\"
  }, _provideComponents(), props.components);
  return <_components.h1>{\\"Hello World\\"}</_components.h1>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

",
  "structurizedData": {},
}
`;
